.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "STRONG_CONN" "1" "September 2017" "www.complex-networks.net" "www.complex-networks.net"
.
.SH "NAME"
\fBstrong_conn\fR \- Find the strongly connected components of a directed graph
.
.SH "SYNOPSIS"
\fBstrong_conn\fR \fIgraph_in\fR [SHOW]
.
.SH "DESCRIPTION"
\fBstrong_conn\fR finds the strongly connected components of the directed graph given as input using the Kosaraju\-Sharir algorithm, and prints the size of each of them\. If the optional second parameter \fBSHOW\fR is provided, the program dumps on output also the list of nodes belonging to each component\.
.
.SH "PARAMETERS"
.
.TP
\fIgraph_in\fR
input graph (edge list) if equal to \fB\-\fR (dash), read the edge list from STDIN\.
.
.TP
SHOW
If the (optional) second parameter is equal to \fBSHOW\fR, the program will dump on output the list of all the nodes belonging to each strongly connected component\.
.
.SH "OUTPUT"
\fBstrong_conn\fR prints on the standard output the size of all the strongly connected components of the directed graph given as input, one per line:
.
.IP "" 4
.
.nf

    size_1
    size_2
    size_3
    \.\.\.\.\.
.
.fi
.
.IP "" 0
.
.P
where \fBsize_1\fR is the size of the first component, \fBsize_2\fR is the size of the second component, and so on\. Notice that the sizes are not sorted\. If \fBSHOW\fR is given, the program shows the list of nodes belonging to each strongly connected component, in the format:
.
.IP "" 4
.
.nf

size_1: node_1 node_2 node_3 \.\.\.
size_2: node_1 node_2 node_3 \.\.\.
.
.fi
.
.IP "" 0
.
.SH "EXAMPLES"
The following command:
.
.IP "" 4
.
.nf

      $ strong_conn web\-NotreDame\.net
      53968
      1
      1
      1
      1
      1
      1
      \.\.\.\.
      $
.
.fi
.
.IP "" 0
.
.P
shows on output the size of the strongly connected component of the graph \fBweb\-NotreDame\.net\fR (the NotreDame WWW data set), in no particular order\. In this case the graph has 203609 strongly connected components, most of them containing only 1 isolated node\. If we want to know who are the nodes belonging to each connected component, we run:
.
.IP "" 4
.
.nf

      $ strong_conn web\-NotreDame\.net SHOW
      53968: 0 1 3 4 5 6 7 8\.\.\.\.\.
      \.\.\.\.\. 325727 325728
      1: 351
      1: 350
      1: 2209
      1: 2208
      1: 2206
      1: 10609
      \.\.\.\.
      $
.
.fi
.
.IP "" 0
.
.P
It is better to save the output of \fBstrong_conn\fR into a file, e\.g\. by using:
.
.IP "" 4
.
.nf

      $ strong_conn web\-NotreDame\.net SHOW > web\-NotreDame\.net_scc
.
.fi
.
.IP "" 0
.
.SH "SEE ALSO"
components(1), node_components(1), largest_component(1)
.
.SH "REFERENCES"
.
.IP "\(bu" 4
V\. Latora, V\. Nicosia, G\. Russo, "Complex Networks: Principles, Methods and Applications", Chapter 6, Cambridge University Press (2017)
.
.IP "\(bu" 4
V\. Latora, V\. Nicosia, G\. Russo, "Complex Networks: Principles, Methods and Applications", Appendix 8, Cambridge University Press (2017)
.
.IP "" 0
.
.SH "AUTHORS"
(c) Vincenzo \'KatolaZ\' Nicosia 2009\-2017 \fB<v\.nicosia@qmul\.ac\.uk>\fR\.
