.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "JOHNSON_CYCLES" "1" "September 2017" "www.complex-networks.net" "www.complex-networks.net"
.
.SH "NAME"
\fBjohnson_cycles\fR \- Enumerate the simple cycles of a graph
.
.SH "SYNOPSIS"
\fBjohnson_cycles\fR \fIgraph_in\fR [\fImax_length\fR [SHOW]]
.
.SH "DESCRIPTION"
\fBjohnson_cycles\fR enumerates all the simple cycles of the graph given on input, and prints the total number of cycles of each length\. If \fImax_length\fR is provided, \fBjohnson_cycles\fR ignores any cycle whose length is larger than \fImax_length\fR\. If \fBSHOW\fR is given as third argument, all the found cycles are printed on STDERR as soon as they are found\.
.
.SH "PARAMETERS"
.
.IP "\(bu" 4
\fIgraph_in\fR: input graph (edge list) if equal to \fB\-\fR (dash), read the edge list from STDIN\.
.
.IP "\(bu" 4
\fImax_length\fR: The maximum length of cycles to count/print\. If not provided, \fBjohnson_cycles\fR tries to find all the cycles of the graph (see the \fBWARNING\fR in the section \fIOUTPUT\fR below)\.
.
.IP "\(bu" 4
SHOW: If the third (optional) parameter is equal to \fBSHOW\fR, the program will dump on the standard error all the cycles found\.
.
.IP "" 0
.
.SH "OUTPUT"
\fBjohnson_cycles\fR prints on the standard output the number of cycles of each length, in the format:
.
.IP "" 4
.
.nf

    2 N_2
    3 N_3
    4 N_4
    5 N_5
    \.\.\.
.
.fi
.
.IP "" 0
.
.P
where 2, 3, 4, 5\.\.\. is the cycle lengths and N_2, N_3, N_4, N_5\.\.\. is (twice) the number of cycles of that length\. If \fBSHOW\fR is given, each cycle is also printed on STDERR as soon as it is found, in the format:
.
.IP "" 4
.
.nf

node_l node_(l\-1) node_(l\-2) \.\.\. node_0
.
.fi
.
.IP "" 0
.
.P
where \fBnode_l\fR, \fBnode_(l\-1)\fR, etc\. are the labels of the nodes belonging to the cycle which starts at node \fBnode_0\fR\.
.
.P
\fBWARNING\fR: If the second parameter \fImax_length\fR is not provided, \fBjohnson_cycles\fR will try to enumerate \fBall\fR the cycles of the graph\. In general, this might take a time \fBexponential\fR in the number of nodes and edges of the graph\. As a consequence, specifying a maximum length is \fBhighly recommended\fR if you are not interested in finding the number of cycles of any length\.
.
.SH "EXAMPLES"
We can count the cycle of any length in the graph of Florentine families using the command:
.
.IP "" 4
.
.nf

      $ johnson_cycles florentine\.net
      2 20
      3 6
      4 4
      5 6
      6 10
      7 20
      8 22
      9 8
      10 2
      11 0
      12 0
      13 0
      14 0
      15 0
      16 0
      $
.
.fi
.
.IP "" 0
.
.P
The output means that the graph has 20 cycles of length 2 (edges), 6/2=3 cycles of length 3, 4/2=2 cycles of length 4, and so on\. We could otherwise focus on the cycles of length up to 5 and have each cycle printed on output:
.
.IP "" 4
.
.nf

      $ johnson_cycles florentine\.net 5 SHOW
      8 0
      5 1
      8 15 6 1
      8 12 15 6 1
      6 1
      6 15 12 8 1
      6 15 8 1
      8 1
      8 12 14 4 2
      \.\.\.\.
      15 12
      2 20
      3 6
      4 4
      5 6
      $
.
.fi
.
.IP "" 0
.
.P
Apart from the degenerate cycles like "8 0", "5 1", etc\., corresponding to the cycles obtained by traversing the same undirected edge in the two possible directions, we see in that list some of the cycles of length 4 (such as "8 15 6 1") and of length 5 (such as "8 12 15 6 1")\.
.
.P
The enumeration of all the cycles is normally impractical on larger graphs, so it is highly recommended to limit the search to short sizes\. For instance, the command:
.
.IP "" 4
.
.nf

    $ johnson_cycles er_1000_5000\.net 6
    2 5000
    3 340
    4 2406
    5 19416
    6 160554
    $
.
.fi
.
.IP "" 0
.
.P
will require less than one second on a modern desktop computer, but the command:
.
.IP "" 4
.
.nf

    $ johnson_cycles er_1000_5000\.net 7
    2 5000
    3 340
    4 2406
    5 19416
    6 160554
    7 1360104
    $
.
.fi
.
.IP "" 0
.
.P
will probably take about 15 seconds, while:
.
.IP "" 4
.
.nf

    $ johnson_cycles er_1000_5000\.net 8
    2 5000
    3 340
    4 2406
    5 19416
    6 160554
    7 1360104
    8 11743500
    $
.
.fi
.
.IP "" 0
.
.P
will run for more than 2 minutes, and larger cycle lengths will require exponentially more time\.
.
.SH "SEE ALSO"
f3m(1), shortest(1)
.
.SH "REFERENCES"
.
.IP "\(bu" 4
D\. B\. Johnson\. "Finding All the Elementary Circuits of a Directed Graph"\. SIAM J\. Comput\. 4 (1975), 77\-84\.
.
.IP "\(bu" 4
V\. Latora, V\. Nicosia, G\. Russo, "Complex Networks: Principles, Methods and Applications", Chapter 8, Cambridge University Press (2017)
.
.IP "\(bu" 4
V\. Latora, V\. Nicosia, G\. Russo, "Complex Networks: Principles, Methods and Applications", Appendix 15, Cambridge University Press (2017)
.
.IP "" 0
.
.SH "AUTHORS"
(c) Vincenzo \'KatolaZ\' Nicosia 2009\-2017 \fB<v\.nicosia@qmul\.ac\.uk>\fR\.
