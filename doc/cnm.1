.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "CNM" "1" "September 2017" "www.complex-networks.net" "www.complex-networks.net"
.
.SH "NAME"
\fBcnm\fR \- Find communities using greedy modularity optimisation
.
.SH "SYNOPSIS"
\fBcnm\fR \fIgraph_in\fR
.
.SH "DESCRIPTION"
\fBcnm\fR finds the communities in \fIgraph_in\fR using the greedy modularity optimisation algorithm proposed by Clauset, Newman and Moore\. The program prints on STDOUT the partition corresponding to the highest value of the modularity function, and reports on STDERR the number of communities and the corresponding value of modularity at each step\. The algorithm is quite eficient and thus suitable to find communities in large graphs\.
.
.SH "PARAMETERS"
.
.TP
\fIgraph_in\fR
undirected input graph (edge list)\. If is equal to \fB\-\fR (dash), read the edge list from STDIN\.
.
.SH "OUTPUT"
The program prints on STDOUT the partition corresponding to the highest value of modularity, in the format:
.
.IP "" 4
.
.nf

    ## nc: NUM_COMM Q_max: Q_MAX
    node_1 comm_1
    node_2 comm_2
    node_3 comm_3
    \.\.\.
.
.fi
.
.IP "" 0
.
.P
where \fBcomm_i\fR is the community to which \fBnode_i\fR belongs\. The first output line reports the number of communities \fBNUM_COMM\fR and the corresponding value of modularity \fBQ_MAX\fR of the partition\.
.
.P
The program prints on STDERR the number of communities and the corresponding value of modularity at each step, in the format:
.
.IP "" 4
.
.nf

    nc_1 Q_1
    nc_2 Q_2
    nc_3 Q_3
    \.\.\.\.
.
.fi
.
.IP "" 0
.
.P
where \fBnc_i\fR is the number of communities after the i\-th marge and \fBQ_i\fR is the corresponding value of modularity\. Since the algorithm merges two communities at each step, the values \fBnc_1\fR, \fBnc_2\fR, \fBnc_3\fR, etc\. will be equal to \fBN\-1\fR, \fBN\-2\fR, \fBN\-3\fR, etc\.
.
.SH "EXAMPLES"
We can use \fBcnm\fR to find communities in the graph \fBkarate_club_unweighted\.net\fR (Zachary Karate Club network) with the command:
.
.IP "" 4
.
.nf

    $ cnm karate_club_unweighted\.net 2> karate_cnm_trace
    ### nc: 3 Q_max: 0\.380671
    0 16
    1 2
    2 2
    3 2
    4 16
    5 16
    6 16
    \.\.\.
    30 26
    31 26
    32 26
    33 26
    $
.
.fi
.
.IP "" 0
.
.P
The program has found a partition with 3 communities corrisponding to a modularity Q=0\.380671\. Notice that node 0, 4, 5, 6 are in community 16, node 1, 2, 3 are in community 2, and so forth\. In this example, we have chosen to save the information about number of communities and modularity at each step in the file \fBkarate_cnm_trace\fR\.
.
.SH "SEE ALSO"
modularity(1), gn(1), label_prop(1)
.
.SH "REFERENCES"
.
.IP "\(bu" 4
A\. Clauset, M\. E\. J\. Newman, and C\. Moore\. "Finding community structure in very large networks"\. Phys\. Rev\. E 70 (2004), 066111\.
.
.IP "\(bu" 4
V\. Latora, V\. Nicosia, G\. Russo, "Complex Networks: Principles, Methods and Applications", Appendix 18, Cambridge University Press (2017)
.
.IP "\(bu" 4
V\. Latora, V\. Nicosia, G\. Russo, "Complex Networks: Principles, Methods and Applications", Chapter 9, Cambridge University Press (2017)
.
.IP "" 0
.
.SH "AUTHORS"
(c) Vincenzo \'KatolaZ\' Nicosia 2009\-2017 \fB<v\.nicosia@qmul\.ac\.uk>\fR\.
